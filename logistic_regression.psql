
create or replace function sigmoid(in x float)
    returns float
    language plpgsql stable
as $$
    begin
        return 1 / (1 + power(2.718281828459045, -x));

    end;
    $$;


create or replace function bin_log_reg (in X regclass, in Y regclass)
--     returns integer[]
    returns integer
    language plpgsql stable
as $$
declare
    bias float = 0;
    learn_rate float = 0.001;

    n_samples integer;
    n_features integer;
    weights float[5];

    pred float[];
    dz float[];
    dw float[];
    db float;
begin
    execute format('select count(*) from %s', X) into n_samples;
    execute format('select count(*) from pg_attribute where attrelid = ''%s''::regclass and attnum > 0 and not attisdropped', X) into n_features;

    for i in 1..100 loop
        execute format('select sigmoid(x) from %s', X) into pred;
        execute format('select pred - y from %s, %s', unnest(pred), X) into dz;

        dw = (1 / n_samples) *

    end loop;

    return n_samples;
end
$$;


select * from bin_log_reg('logistic_table');

-- select *, row_number() over () as id from logistic_table;
-- select *, row_number() over () as id from logistic_table

-- select x - x0 as test from logistic_table, linear_tb;
